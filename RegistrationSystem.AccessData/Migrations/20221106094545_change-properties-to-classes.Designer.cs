// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegistrationSystem.AccessData;

#nullable disable

namespace RegistrationSystem.AccessData.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221106094545_change-properties-to-classes")]
    partial class changepropertiestoclasses
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RegistrationSystem.Entities.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(460)
                        .HasColumnType("varbinary(460)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(460)
                        .HasColumnType("varbinary(460)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Accounts", "RegistrationSystem");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.AccountProperties.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Emails", "RegistrationSystem");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.AccountProperties.FirstName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("FirstNames", "RegistrationSystem");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.AccountProperties.LastName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("LastNames", "RegistrationSystem");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.AccountProperties.PersonalCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("PersonalCodes", "RegistrationSystem");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.AccountProperties.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Phones", "RegistrationSystem");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppartmentNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("StreetId");

                    b.ToTable("Addresses", "RegistrationSystem");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UI_CityName")
                        .IsUnique();

                    b.ToTable("Cities", "RegistrationSystem");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UI_StreetName")
                        .IsUnique();

                    b.ToTable("Streets", "RegistrationSystem");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("EmailId")
                        .HasColumnType("int");

                    b.Property<int>("FirstNameId")
                        .HasColumnType("int");

                    b.Property<int>("LastNameId")
                        .HasColumnType("int");

                    b.Property<int>("PersonalCodeId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("EmailId");

                    b.HasIndex("FirstNameId");

                    b.HasIndex("LastNameId");

                    b.HasIndex("PersonalCodeId");

                    b.HasIndex("PhoneId");

                    b.ToTable("UserInfos", "RegistrationSystem");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.Address", b =>
                {
                    b.HasOne("RegistrationSystem.Entities.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistrationSystem.Entities.Models.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.UserInfo", b =>
                {
                    b.HasOne("RegistrationSystem.Entities.Models.Address", "Address")
                        .WithMany("UserInfos")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RegistrationSystem.Entities.Models.AccountProperties.Email", "Email")
                        .WithMany("UserInfos")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistrationSystem.Entities.Models.AccountProperties.FirstName", "FirstName")
                        .WithMany("UserInfos")
                        .HasForeignKey("FirstNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistrationSystem.Entities.Models.Account", "Account")
                        .WithOne("UserInfo")
                        .HasForeignKey("RegistrationSystem.Entities.Models.UserInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistrationSystem.Entities.Models.AccountProperties.LastName", "LastName")
                        .WithMany("UserInfos")
                        .HasForeignKey("LastNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistrationSystem.Entities.Models.AccountProperties.PersonalCode", "PersonalCode")
                        .WithMany("UserInfos")
                        .HasForeignKey("PersonalCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistrationSystem.Entities.Models.AccountProperties.Phone", "Phone")
                        .WithMany("UserInfos")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Address");

                    b.Navigation("Email");

                    b.Navigation("FirstName");

                    b.Navigation("LastName");

                    b.Navigation("PersonalCode");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.Account", b =>
                {
                    b.Navigation("UserInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.AccountProperties.Email", b =>
                {
                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.AccountProperties.FirstName", b =>
                {
                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.AccountProperties.LastName", b =>
                {
                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.AccountProperties.PersonalCode", b =>
                {
                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.AccountProperties.Phone", b =>
                {
                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.Address", b =>
                {
                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("RegistrationSystem.Entities.Models.Street", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
